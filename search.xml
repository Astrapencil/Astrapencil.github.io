<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/%E5%9E%92%E7%9F%B3%E6%88%90%E5%A1%94%E7%9A%84%E8%B6%B3%E8%BF%B9/hello-world/</url>
    <content><![CDATA[<h1 id="开张！"><a href="#开张！" class="headerlink" title="开张！"></a>开张！</h1><p>这篇文章的发布时间是站点正式立项的日子！</p>
<p>尽管它还在用着github的域名……</p>
<p>当然，5月16日它正式Deploy，所以建站时间就是从5月16日算起！</p>
<hr>
<p>8月11日编辑：新域名<a href="https://astralun.top">astralun.top</a>！</p>
]]></content>
      <categories>
        <category>垒石成塔的足迹</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建站踩坑日志</title>
    <url>/%E7%9F%A5%E8%AF%86%E3%80%81%E7%BB%8F%E9%AA%8C%E4%B8%8E%E6%8A%80%E5%B7%A7/Hexo%E5%BB%BA%E7%AB%99%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/personalstyle.css">

<p>前些日子看到了本年级5班搭建的“班级主页”（现在是Cloudreve页面不知道为什么），心血来潮想自己搞自己的博客。搜了<a class="link"   href="https://hexo.io/zh-cn/docs/" >HEXO官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="https://zhuanlan.zhihu.com/p/547520780" >知乎的教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（我觉得写得较好的一篇），却还愣是栽进不明所以的大坑里去。</p>
<p>一番折腾，再折腾，终于从大坑里边爬出来，开始填小坑了。</p>
<h2 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h2><h3 id="cnpm的安装"><a href="#cnpm的安装" class="headerlink" title="cnpm的安装"></a><code>cnpm</code>的安装</h3><p><code>npm</code>(Node Package Manager)是<code>node</code>包的管理工具。<br>而<code>cnpm</code>是淘宝做的一个完整的<code>npmjs.org</code>镜像（淘宝镜像），可以用它代替官方版本，国内访问速度很快。</p>
<p>只需要在<code>cmd</code>或鼠标右键再点<code>Git Bash</code>中输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>
<p><code>Enter</code>即可！</p>
<p>以后所有的<code>npm</code>命令都可以换成<code>cnpm</code>命令！<br><del>妈妈再也不用担心我下不到依赖力</del></p>
<h3 id="Where-is-my-Git-Bash-Here？"><a href="#Where-is-my-Git-Bash-Here？" class="headerlink" title="Where is my Git Bash Here？"></a>Where is my <code>Git Bash Here</code>？</h3><p>Git是以前想玩AI绘图的时候装的，我平时也不编程，<code>Git Bash Here</code>感觉放在右键菜单里没什么用，于是就，，删掉了。</p>
<p>看网上说还有原因就是没有把Git装在C盘。</p>
<p>其实只要会搜索也不复杂，附教程一篇：<a class="link"   href="https://blog.csdn.net/qq_41019529/article/details/110139830" >鼠标右键没有git bash here，右键添加git bash here并增加图标 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在进行初始化的时候，会用到</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></div>
<p>因为网络问题，等了很久，文件夹里并没有出现亲爱的<code>node_modules</code>文件夹。</p>
<p>此时<del>正确</del>节省时间的方法是</p>
<ol>
<li><code>Ctrl+C</code>结束下载</li>
<li>使用万能的<code>cnpm</code>输入<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure></div>
然后文件夹里就会单独安装一个<code>node_modules</code>模块。</li>
</ol>
<p>其实这个步骤在Hexo文档里是存在的（不过人家用的是<code>npm install</code>）,是一个补全dependencies的步骤，是初始化的收尾工作，但是！当初在大陆网络环境下强行使用<code>npm</code>的我，下载的<code>node_modules</code>，是不全的。</p>
<p>其实应该使用的解决方法就是用<code>cnpm</code>重新下载。但当时我并不知道，于是就多了巨多折腾的工夫，并给24年7月的重新部署埋下了祸根。</p>
<p><em>以下是我当时的错误示范，仅供参考</em></p>
<div style="background-color: #cccccc" class=x_border>
无论如何，安装目录下`\node_modules\.store`一般都是下全了的。


<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Hexo%E5%BB%BA%E7%AB%99%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/SnipasteScreenShot0.png"
                     
                ></p>
<p>翻这个<code>\.store</code>可以找到相应包的版本号，即图中划红线部分<br>然后用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cnpm i xxxx@xx.xx.xx</span><br></pre></td></tr></table></figure></div>

<p>进行安装，“@”后面为版本号。</p>
<p>而如果遇到蓝色框中的情况，则推荐用最旧的版本<del>，反正能用就行</del>。</p>
<p>或者在<a class="link"   href="https://www.npmjs.com/" >npm官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>找到对应的包，然后找下载数最多的版本安装。</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Hexo%E5%BB%BA%E7%AB%99%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/SnipasteScreenShot1.png"
                      alt="一个名为timed-out的npm包的官网页面"
                ><figcaption>一个名为timed-out的npm包的官网页面</figcaption></figure></p>
</div>

<h2 id="报错情况"><a href="#报错情况" class="headerlink" title="报错情况"></a>报错情况</h2><p><em>诀窍：认真去看ERROR后面到底跟着些什么东西+会用搜索引擎。</em></p>
<h4 id="Error-cannot-find-module-xxxx"><a href="#Error-cannot-find-module-xxxx" class="headerlink" title="Error: cannot find module&#39;xxxx&#39;"></a><code>Error: cannot find module&#39;xxxx&#39;</code></h4><p>node.js版本18.16.0，在更换主题时，首先遇到了这个报错。</p>
<p>一眼顶针，<code>node_modules</code>缺包。（其实也是网络问题埋的雷）</p>
<p>在<code>Git Bash</code>中输：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cnpm i xxxx</span><br></pre></td></tr></table></figure></div>

<p>原则：缺啥装啥。</p>
<h4 id="require-of-ES-Module"><a href="#require-of-ES-Module" class="headerlink" title="require() of ES Module"></a><code>require() of ES Module</code></h4><p>首先上原文</p>
<details class="white" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>报错全文 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cnpm install hexo-all-minifier</span><br><span class="line">&gt; hexo-all-minifier@0.5.7 › imagemin-mozjpeg@9.0.0 › mozjpeg@^7.0.0 postinstall D:\Hexo\node_modules\.store\mozjpeg@7.1.1\node_modules\mozjpeg</span><br><span class="line">&gt; node lib/install.js</span><br><span class="line">D:\Hexo\node_modules\.store\decompress-tarbz2@4.1.1\node_modules\decompress-tarbz2\index.js:3</span><br><span class="line">const fileType = require(&#x27;file-type&#x27;);</span><br><span class="line">                 ^</span><br><span class="line"></span><br><span class="line">Error [ERR_REQUIRE_ESM]: require() of ES Module D:\Hexo\node_modules\.store\file-type@18.4.0\node_modules\file-type\index.js from D:\Hexo\node_modules\.store\decompress-tarbz2@4.1.1\node_modules\decompress-tarbz2\index.js not supported.</span><br><span class="line">Instead change the require of D:\Hexo\node_modules\.store\file-type@18.4.0\node_modules\file-type\index.js in D:\Hexo\node_modules\.store\decompress-tarbz2@4.1.1\node_modules\decompress-tarbz2\index.js to a dynamic import() which is available in all CommonJS modules.</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\Hexo\node_modules\.store\decompress-tarbz2@4.1.1\node_modules\decompress-tarbz2\index.js:3:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\Hexo\node_modules\.store\decompress@4.2.1\node_modules\decompress\index.js:5:26)</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\Hexo\node_modules\.store\bin-build@3.0.0\node_modules\bin-build\index.js:2:20)</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\Hexo\node_modules\.store\mozjpeg@7.1.1\node_modules\mozjpeg\lib\install.js:4:18) &#123;</span><br><span class="line">  code: &#x27;ERR_REQUIRE_ESM&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>

<p>摘取重点可以看出，报错的中心在于第八行，新加入的插件（由报错看，是<code>file-type</code>的18.4.0版本）与原软件在规范（CommonJs&#x2F;ES）的处理上起了冲突<span class="heimu">（此系本人有效使用搜索引擎得出的结果（骄傲））</span>。</p>
<p>原因在于使用<code>install</code>命令时，会自动安装最新版本（<code>@latest</code>版本）。先用<code>uninstall</code>卸载，再查看文档等，重新安装一些旧版本。</p>
<p>或者像上文所说，“在<a class="link"   href="https://www.npmjs.com/" >npm官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>找到对应的包，然后找下载数最多的版本安装。”</p>
<h4 id="非法字符"><a href="#非法字符" class="headerlink" title="非法字符"></a>非法字符</h4><details class="white" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>报错全文 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cnpm i @iktakahiro+markdown-it-katex@4.0.1</span><br><span class="line">C:\Users\Admin\AppData\Roaming\npm\node_modules\cnpm\node_modules\npminstall\lib\npa.js:17</span><br><span class="line">    throw newError;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">Error: Invalid package name &quot;@iktakahiro+markdown-it-katex&quot;: name can only contain URL-friendly characters package: root › @iktakahiro+markdown-it-katex@4.0.1</span><br><span class="line">    at npa (C:\Users\HP\AppData\Roaming\npm\node_modules\cnpm\node_modules\npminstall\lib\npa.js:15:22)</span><br><span class="line">    at exports.parsePackageName (C:\Users\HP\AppData\Roaming\npm\node_modules\cnpm\node_modules\npminstall\lib\alias.js:4:13)</span><br><span class="line">    at Object.&lt;anonymous&gt; (C:\Users\HP\AppData\Roaming\npm\node_modules\cnpm\node_modules\npminstall\bin\install.js:165:7)</span><br><span class="line">    at Module._compile (node:internal/modules/cjs/loader:1254:14)</span><br><span class="line">    at Module._extensions..js (node:internal/modules/cjs/loader:1308:10)</span><br><span class="line">    at Module.load (node:internal/modules/cjs/loader:1117:32)</span><br><span class="line">    at Module._load (node:internal/modules/cjs/loader:958:12)</span><br><span class="line">    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)</span><br><span class="line">    at node:internal/main/run_main_module:23:47 &#123;</span><br><span class="line">  code: &#x27;EINVALIDPACKAGENAME&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node.js v18.16.0</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>

<p>这个问题就出现在第1行，<code>@iktakahiro+markdown-it-katex@4.0.1</code>出现了不合适的<code>+</code>。第16行也写得很清楚。把包名改成<a class="link"   href="https://www.npmjs.com/" >npm官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>上的<code>@iktakahiro/markdown-it-katex@4.0.1</code>就好。</p>
<h2 id="Markdown问题"><a href="#Markdown问题" class="headerlink" title="Markdown问题"></a>Markdown问题</h2><br>
<div class="info_x x_border"><i class="fa-solid fa-circle-info"></i><span>&emsp;&emsp;本博客现在使用的Markdown渲染器为<code>hexo-renderer-marked</code>，<del>使用的公式渲染器为<code>hexo-fliter-mathjax</code></del>由于该插件会报错并且我难以解决，所以公式类书写换用JS方式实现。</span></div>

<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Typora还是太好用了，兼容各种Markdown扩展语法，和它一比，原版渲染器相形见绌。</p>
<p>也不是没有考虑过换用更高级的Markdown渲染器，也参考有几篇文章（<a class="link"   href="https://bugwz.com/2019/09/17/hexo-markdown-renderer/" >Hexo的多种Markdown渲染器对比分析 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/123596899" >[Hexo]选择更高级的Markdown渲染器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>），但是折腾来折腾去，还是换回了默认款。</p>
<ol>
<li><p>很多Markdown渲染器对于中文文本的适配十分差劲</p>
<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Hexo%E5%BB%BA%E7%AB%99%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/SnipasteScreenShot_2023-06-18_16-19-04.png"
                      alt="一个删除线在中文语境下识别渲染失败的例子"
                ><figcaption>一个删除线在中文语境下识别渲染失败的例子</figcaption></figure></p>
<p>这个问题无论换哪个渲染器都没有解决。</p>
<p>不过也不能太过苛责，毕竟中文没有那么多空格在文章里。但这确实是一个需要去解决的问题啊。</p>
</li>
<li><p>其它渲染器自带的CSS样式<strong>不！好！看！</strong></p>
<p>本来用它的配件就是为了省事，结果你跟我说我还要自己写样式，不如不用。</p>
</li>
<li><p>配件繁多，难折腾，还冗余。</p>
</li>
</ol>
<p>综上，我还是换回了默认的渲染器<code>hexo-renderer-marked</code>，转而通过自己写CSS样式表来实现提示、引用等功能。</p>
<p>所以现在就是，Markdown能解决的先用Markdown，其次用博客主题的配件，再不济上Html、CSS，最后上JS<span class="heimu" title="你知道得太多了">，缝合怪吗</span>。</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>搭建这个博客，也是跟着文档一步一步走，跟着知乎上的教程一步步来的。但是，毕竟每个人的网络不一样，每个人的设备也不一样，遇到的问题也会是千奇百怪的。</p>
<p>以上遇到的问题，有的有些教程提到了，有的却连搜索引擎都找不到结果。实在是本人资源匮乏，真要去翻Issue可以翻个天长地久还经常无功而返，而要去Issue上提问题，那真的还不如自己找（而且最后发现大部分都是我自己的问题），所以只好一步一步，跟着经验和知乎、博客园、CSDN上零碎的只言片语慢慢来。</p>
<p>我其实并不会编程，而且因为学业的关系，前前后后花了近两个月，才把博客基本调教好。</p>
<p>不知道是不是真的没有人遇到过类似的问题，还是没有人愿意写这种文章，至少举目所及，我掉进的坑里，人迹罕至T_T</p>
<p>但回头一想，这一个个“踩坑”的过程，其实也是一次次锻炼耐心的过程。耐心是好东西，自古至今，可现代人最缺的东西之一好像就是耐心。</p>
<p>像是现在，知道“图种”是什么的人少之又少，之前在Bilibili还看到过一句话：</p>
<blockquote>
<p>以前的伸手党给个链接还会自己下；现在的伸手党真的只会伸手。</p>
</blockquote>
<p>还是希望这篇文章能够让有需要的人在自食其力的道路上，多一些成就感，少一些挫败感吧！</p>
]]></content>
      <categories>
        <category>知识、经验与技巧</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>电脑</tag>
      </tags>
  </entry>
  <entry>
    <title>星野爱——爱与谎言的绝症</title>
    <url>/%E4%BA%8E%E6%96%AF%E6%9C%89%E6%84%9F/%E6%98%9F%E9%87%8E%E7%88%B1%E2%80%94%E2%80%94%E7%88%B1%E4%B8%8E%E8%B0%8E%E8%A8%80%E7%9A%84%E7%BB%9D%E7%97%87/</url>
    <content><![CDATA[
  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>剧透警告</p>

    </div>
    <div class="notel-content">
      <p>本文章中含有番剧《我推的孩子 第一季》第一话的内容，请谨慎浏览！</p>

    </div>
  </div>

<p>1小时22分钟，吃了一记正劈和一记回马枪。第一集类似于前传吧，看完……只有压抑。</p>
<p>星野爱从小在孤儿院长大，从各个方面都写出她是一个极度缺爱的孩子。内心空虚，想去爱，想得到情感寄托，但是却并没有爱的能力。有点儿像太宰治吧，无法接纳，无法感受，但又并没有那么极端，因为她依然在尽力尝试。</p>
<p>然而偶像职业其实并不适合她，就算她确实有一个好的面容，因为她不懂得真正去掌握“爱”的情感，而是曲解了它的含义：“谎言就是爱”。或许在特殊语境下，或许对她个人而言，此句是成立的。但是，“爱”和“爱”，真的是同一种东西吗？</p>
<p>太宰治在风花雪月中获得他的充实与满足，那终究不是爱，填不满他的内心，他依旧是本我的奴隶；星野爱其实也一样。但这空虚并非源于她自己，而她确实在努力，去说爱，去卖力，去迎合。</p>
<p>而互联网是个无情的东西，信息与情感在互联网上都是廉价的。从偶像这个职业来说，爱的反馈其实寥寥。这既是互联网的内禀，也是商业的绑架。这就好像又回到了起点：她希望去爱别人，但是没人“爱”她。</p>
<p>之前有听过一个新闻：有一个女孩儿不顾家里人反对，多次打胎之后仍然坚持要生下一个孩子。我觉得这其实是情感缺失的一种极端体现。情感交流是双向的。一个人不能在他的原生家庭中找到感情依靠，就必然要去其他的人那里寻找感情寄托。</p>
<p>但谎言确实是一个人可以说的。自己织就的谎言一旦包裹了自己，便再也分不出到底是什么谎言了，如同自我麻醉，但更可悲的是这谎言的茧是织在一个最大的谎言上的：谎言会成真。</p>
<p>但谎言毕竟是权宜，是虚伪，真与假再怎么辩证也是不可能完全统一的。无力感其实贯穿始终。</p>
<p>抛开星野爱的原生家庭和最后的凶手不说，其实并没有哪个人是有错的。挖走星野爱的社长只是在工作，社长的妻子也有自己的梦想，只是……</p>
<p>“欲戴王冠，必承其重。”</p>
<p>星野爱是一个有缺陷的个体，她会笑，会唱，会跳，乐观而有活力；她并不是贪得无厌，也并不是冷漠无情，只是她的路与她的心站在了对立的面上。她希望能够汲取爱，但是在这条路上，谎言又成了良药，成了必须，一个矛盾的个体，悲剧就是注定的：没有人真正想要她死，可她就是死了。</p>
<p>死亡，不是谎言。 </p>
]]></content>
      <categories>
        <category>于斯有感</category>
      </categories>
      <tags>
        <tag>番剧</tag>
        <tag>推しの子</tag>
        <tag>有感而发</tag>
        <tag>星野 アイ</tag>
      </tags>
  </entry>
  <entry>
    <title>流萤与星空</title>
    <url>/%E9%97%B2%E7%AC%94%E7%A2%8E%E7%BA%B8/%E6%B5%81%E8%90%A4%E4%B8%8E%E6%98%9F%E7%A9%BA/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="星星沉默不语。" data-whm="星空依旧徒然明亮。">
  <script id="hbeData" type="hbeData" data-hmacdigest="8b3463857219328be427463ab32184d8cdc2b4c32d836978a062b9d3bf92d4bb">9906d02578a34a21130e8a7e7a0484cb85ef6a0b461327db52b1288bbd61b363a997c4de8a05c0dec8d666962df04c70d45ad856eeb800a30dcfeddff6957d1df699354c3cfcac1a4b96d864690cb16abf0e1d04f6014994be31b86d48b2f6b15addbd26f29fd15381e0da8909941d19fd7d217c3ca2b78ff7dc3624a78f8d94298c95d2643acaceb48338b6bbfa920f5f2d4208c3490d1246b3d178335e78926f59f853f2327c5b4df87bead679424630c18d03eb403d04595317275f76c27d9b99254709a775fd537ceb77ea3704caa67b86b5a26c43b74e2c31db5a2959b2502c09ac11232b145a88458a40305eaa3d8039bf04f674c8a2df321b638007f08a5d196d347c9c3c8bd037f1a4c8f6106bddf6f75c1cd20d925350d7449722bf361982d74c99c49a5e89352dfa786d9e52704adfd18a0e82d50aad69819121aea084fc2afdead87dcc22359fdfcef908685b752f41c8b35d35c41276b213092a416f12cd068b85511c7f4a17b2aea0c466f6a1fa37e1b3791a105b7e9081259dfcd6e588f03ac48347c9c60cd176b8c4b7f5db7a8780c9322fc36ab86a9ea44fd10538bac2b057b8fd403f20bffbd5438245c7c24893cec975eb3d90b5a00a49cd60e71fcc5f97dc394cda2b8bff936a90e0219aa969e857f8d2492e0f19ce34be2d00cd77232d9df9394fc7ee50b397092eb9dda3e8bef6c4813c14f25836ba5135700717bc9fb59232f5d01fa249b89838812749ff3df1edfeab8611741bec375df0fff9306d221eb83c946eaa075b6ee5fbd67b0125e54bb6f15ddf3120c59a453593c10988e0bb384cd3ed63a1f8aaaba8faa77d9e2aa1853a64ec9e45151b923b362221f600eab59a65eca010b864875637204e384bdcaa71d99146eeefadba193b01c8f73bd9f731fbb31a9540379fe9bba2599635acda5f79cfc6f84024440ad7931f19e779140a1a004f3cfe9a1c455d3a817a9849b356db982de43ff99a40e1e093e676350d21cb24570740934539464332d168023f44fd6022637918cf67675c5014d4b051cfb4dbe85fabac898612da2fd75fd73b2d7add2acf85510dcbdbf639bbe2db361d2002620c103f58c19fe268b3b9bee58e281777c586252e082f146c3b2a1d99d2a119276f4e50cb1f6e883aa917fb379e648703b9d95cc83e37f1e3ab44402278e9b63769d08007eeceb63ed7e40b7bb83c8447ec107310a24c83a074747bee408e88f2e20d48cbe7f2d628c997b44fe051927a68ed8e2ac8be741b5fcc76ed02fea7fd1a5f8f0612265e581079b8ba45e05ff81632aee853bf9b4b9940d209f7fac22c34c20e81b13ea1d7c41e08a15d18d152b050dda195476ceb968b4f8b75e98f6e80dd1e595a4fbe3c47ae6d5a8e95147cb23f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">星亦有其五言之名。</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>闲笔碎纸</category>
      </categories>
      <tags>
        <tag>星空</tag>
        <tag>灵感</tag>
        <tag>尘埃</tag>
      </tags>
  </entry>
</search>
